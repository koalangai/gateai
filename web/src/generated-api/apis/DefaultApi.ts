/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BackendType,
  ChatRequest,
  ChatResponse,
  DriverInfo,
  HTTPValidationError,
  ProviderInfo,
  ServiceInfo,
  UsageChatRecord,
} from '../models/index';
import {
    BackendTypeFromJSON,
    BackendTypeToJSON,
    ChatRequestFromJSON,
    ChatRequestToJSON,
    ChatResponseFromJSON,
    ChatResponseToJSON,
    DriverInfoFromJSON,
    DriverInfoToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ProviderInfoFromJSON,
    ProviderInfoToJSON,
    ServiceInfoFromJSON,
    ServiceInfoToJSON,
    UsageChatRecordFromJSON,
    UsageChatRecordToJSON,
} from '../models/index';

export interface GetApplicationsUsageApplicationsTypeGetRequest {
    type: BackendType;
    start: Date;
    end: Date;
}

export interface GetCategoriesUsageCategoriesTypeGetRequest {
    type: BackendType;
    start: Date;
    end: Date;
}

export interface GetServicesUsageServicesTypeGetRequest {
    type: BackendType;
    start: Date;
    end: Date;
}

export interface SayHelloV1ChatCompletionsPostRequest {
    chatRequest: ChatRequest;
}

export interface UsageUsageTypeGetRequest {
    type: BackendType;
    start: Date;
    end: Date;
    query?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Getapplications
     */
    async getApplicationsUsageApplicationsTypeGetRaw(requestParameters: GetApplicationsUsageApplicationsTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling getApplicationsUsageApplicationsTypeGet().'
            );
        }

        if (requestParameters['start'] == null) {
            throw new runtime.RequiredError(
                'start',
                'Required parameter "start" was null or undefined when calling getApplicationsUsageApplicationsTypeGet().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling getApplicationsUsageApplicationsTypeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString();
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/usage/applications/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Getapplications
     */
    async getApplicationsUsageApplicationsTypeGet(requestParameters: GetApplicationsUsageApplicationsTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getApplicationsUsageApplicationsTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Getcategories
     */
    async getCategoriesUsageCategoriesTypeGetRaw(requestParameters: GetCategoriesUsageCategoriesTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling getCategoriesUsageCategoriesTypeGet().'
            );
        }

        if (requestParameters['start'] == null) {
            throw new runtime.RequiredError(
                'start',
                'Required parameter "start" was null or undefined when calling getCategoriesUsageCategoriesTypeGet().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling getCategoriesUsageCategoriesTypeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString();
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/usage/categories/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Getcategories
     */
    async getCategoriesUsageCategoriesTypeGet(requestParameters: GetCategoriesUsageCategoriesTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getCategoriesUsageCategoriesTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Drivers
     */
    async getDriversBackendDriversGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DriverInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/backend/drivers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DriverInfoFromJSON));
    }

    /**
     * Get Drivers
     */
    async getDriversBackendDriversGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DriverInfo>> {
        const response = await this.getDriversBackendDriversGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Providers
     */
    async getProvidersBackendProviderGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ProviderInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/backend/provider`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProviderInfoFromJSON));
    }

    /**
     * Get Providers
     */
    async getProvidersBackendProviderGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ProviderInfo>> {
        const response = await this.getProvidersBackendProviderGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Services
     */
    async getServicesBackendServicesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ServiceInfo>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/backend/services`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceInfoFromJSON));
    }

    /**
     * Get Services
     */
    async getServicesBackendServicesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ServiceInfo>> {
        const response = await this.getServicesBackendServicesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Getservices
     */
    async getServicesUsageServicesTypeGetRaw(requestParameters: GetServicesUsageServicesTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling getServicesUsageServicesTypeGet().'
            );
        }

        if (requestParameters['start'] == null) {
            throw new runtime.RequiredError(
                'start',
                'Required parameter "start" was null or undefined when calling getServicesUsageServicesTypeGet().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling getServicesUsageServicesTypeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString();
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/usage/services/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Getservices
     */
    async getServicesUsageServicesTypeGet(requestParameters: GetServicesUsageServicesTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getServicesUsageServicesTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Say Hello
     */
    async sayHelloV1ChatCompletionsPostRaw(requestParameters: SayHelloV1ChatCompletionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatResponse>> {
        if (requestParameters['chatRequest'] == null) {
            throw new runtime.RequiredError(
                'chatRequest',
                'Required parameter "chatRequest" was null or undefined when calling sayHelloV1ChatCompletionsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/chat/completions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChatRequestToJSON(requestParameters['chatRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatResponseFromJSON(jsonValue));
    }

    /**
     * Say Hello
     */
    async sayHelloV1ChatCompletionsPost(requestParameters: SayHelloV1ChatCompletionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatResponse> {
        const response = await this.sayHelloV1ChatCompletionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Usage
     */
    async usageUsageTypeGetRaw(requestParameters: UsageUsageTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsageChatRecord>>> {
        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling usageUsageTypeGet().'
            );
        }

        if (requestParameters['start'] == null) {
            throw new runtime.RequiredError(
                'start',
                'Required parameter "start" was null or undefined when calling usageUsageTypeGet().'
            );
        }

        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling usageUsageTypeGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString();
        }

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString();
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/usage/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters['type']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsageChatRecordFromJSON));
    }

    /**
     * Usage
     */
    async usageUsageTypeGet(requestParameters: UsageUsageTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsageChatRecord>> {
        const response = await this.usageUsageTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
