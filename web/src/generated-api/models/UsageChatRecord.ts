/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UsageChatRecord
 */
export interface UsageChatRecord {
    /**
     * 
     * @type {string}
     * @memberof UsageChatRecord
     */
    app: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsageChatRecord
     */
    service: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsageChatRecord
     */
    category: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsageChatRecord
     */
    batch: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsageChatRecord
     */
    user: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsageChatRecord
     */
    endpointId: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsageChatRecord
     */
    providerId: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsageChatRecord
     */
    providerType: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsageChatRecord
     */
    model: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsageChatRecord
     */
    message: string | null;
    /**
     * 
     * @type {number}
     * @memberof UsageChatRecord
     */
    temperature: number | null;
    /**
     * 
     * @type {number}
     * @memberof UsageChatRecord
     */
    maxTokens: number | null;
    /**
     * 
     * @type {number}
     * @memberof UsageChatRecord
     */
    n: number | null;
    /**
     * 
     * @type {number}
     * @memberof UsageChatRecord
     */
    seed: number | null;
    /**
     * 
     * @type {string}
     * @memberof UsageChatRecord
     */
    stop: string | null;
    /**
     * 
     * @type {string}
     * @memberof UsageChatRecord
     */
    responseFormat: string | null;
    /**
     * 
     * @type {number}
     * @memberof UsageChatRecord
     */
    presencePenalty: number | null;
    /**
     * 
     * @type {number}
     * @memberof UsageChatRecord
     */
    frequencyPenalty: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof UsageChatRecord
     */
    stream: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof UsageChatRecord
     */
    topP: number | null;
    /**
     * 
     * @type {number}
     * @memberof UsageChatRecord
     */
    timeout: number | null;
    /**
     * 
     * @type {Date}
     * @memberof UsageChatRecord
     */
    start: Date;
    /**
     * 
     * @type {string}
     * @memberof UsageChatRecord
     */
    choices: string | null;
    /**
     * 
     * @type {number}
     * @memberof UsageChatRecord
     */
    prompt: number | null;
    /**
     * 
     * @type {number}
     * @memberof UsageChatRecord
     */
    completion: number | null;
    /**
     * 
     * @type {Date}
     * @memberof UsageChatRecord
     */
    end: Date;
    /**
     * 
     * @type {boolean}
     * @memberof UsageChatRecord
     */
    success: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof UsageChatRecord
     */
    exception: string | null;
}

/**
 * Check if a given object implements the UsageChatRecord interface.
 */
export function instanceOfUsageChatRecord(value: object): boolean {
    if (!('app' in value)) return false;
    if (!('service' in value)) return false;
    if (!('category' in value)) return false;
    if (!('batch' in value)) return false;
    if (!('user' in value)) return false;
    if (!('endpointId' in value)) return false;
    if (!('providerId' in value)) return false;
    if (!('providerType' in value)) return false;
    if (!('model' in value)) return false;
    if (!('message' in value)) return false;
    if (!('temperature' in value)) return false;
    if (!('maxTokens' in value)) return false;
    if (!('n' in value)) return false;
    if (!('seed' in value)) return false;
    if (!('stop' in value)) return false;
    if (!('responseFormat' in value)) return false;
    if (!('presencePenalty' in value)) return false;
    if (!('frequencyPenalty' in value)) return false;
    if (!('stream' in value)) return false;
    if (!('topP' in value)) return false;
    if (!('timeout' in value)) return false;
    if (!('start' in value)) return false;
    if (!('choices' in value)) return false;
    if (!('prompt' in value)) return false;
    if (!('completion' in value)) return false;
    if (!('end' in value)) return false;
    if (!('success' in value)) return false;
    if (!('exception' in value)) return false;
    return true;
}

export function UsageChatRecordFromJSON(json: any): UsageChatRecord {
    return UsageChatRecordFromJSONTyped(json, false);
}

export function UsageChatRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): UsageChatRecord {
    if (json == null) {
        return json;
    }
    return {
        
        'app': json['app'],
        'service': json['service'],
        'category': json['category'],
        'batch': json['batch'],
        'user': json['user'],
        'endpointId': json['endpoint_id'],
        'providerId': json['provider_id'],
        'providerType': json['provider_type'],
        'model': json['model'],
        'message': json['message'],
        'temperature': json['temperature'],
        'maxTokens': json['max_tokens'],
        'n': json['n'],
        'seed': json['seed'],
        'stop': json['stop'],
        'responseFormat': json['response_format'],
        'presencePenalty': json['presence_penalty'],
        'frequencyPenalty': json['frequency_penalty'],
        'stream': json['stream'],
        'topP': json['top_p'],
        'timeout': json['timeout'],
        'start': (new Date(json['start'])),
        'choices': json['choices'],
        'prompt': json['prompt'],
        'completion': json['completion'],
        'end': (new Date(json['end'])),
        'success': json['success'],
        'exception': json['exception'],
    };
}

export function UsageChatRecordToJSON(value?: UsageChatRecord | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'app': value['app'],
        'service': value['service'],
        'category': value['category'],
        'batch': value['batch'],
        'user': value['user'],
        'endpoint_id': value['endpointId'],
        'provider_id': value['providerId'],
        'provider_type': value['providerType'],
        'model': value['model'],
        'message': value['message'],
        'temperature': value['temperature'],
        'max_tokens': value['maxTokens'],
        'n': value['n'],
        'seed': value['seed'],
        'stop': value['stop'],
        'response_format': value['responseFormat'],
        'presence_penalty': value['presencePenalty'],
        'frequency_penalty': value['frequencyPenalty'],
        'stream': value['stream'],
        'top_p': value['topP'],
        'timeout': value['timeout'],
        'start': ((value['start']).toISOString()),
        'choices': value['choices'],
        'prompt': value['prompt'],
        'completion': value['completion'],
        'end': ((value['end']).toISOString()),
        'success': value['success'],
        'exception': value['exception'],
    };
}

