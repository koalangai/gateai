/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChatMessage } from './ChatMessage';
import {
    ChatMessageFromJSON,
    ChatMessageFromJSONTyped,
    ChatMessageToJSON,
} from './ChatMessage';
import type { ResponseFormat } from './ResponseFormat';
import {
    ResponseFormatFromJSON,
    ResponseFormatFromJSONTyped,
    ResponseFormatToJSON,
} from './ResponseFormat';
import type { Stop } from './Stop';
import {
    StopFromJSON,
    StopFromJSONTyped,
    StopToJSON,
} from './Stop';

/**
 * 
 * @export
 * @interface ChatRequest
 */
export interface ChatRequest {
    /**
     * 
     * @type {string}
     * @memberof ChatRequest
     */
    endpoint?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatRequest
     */
    model?: string;
    /**
     * 
     * @type {Array<ChatMessage>}
     * @memberof ChatRequest
     */
    messages: Array<ChatMessage>;
    /**
     * 
     * @type {number}
     * @memberof ChatRequest
     */
    temperature?: number;
    /**
     * 
     * @type {number}
     * @memberof ChatRequest
     */
    maxTokens?: number;
    /**
     * 
     * @type {number}
     * @memberof ChatRequest
     */
    n?: number;
    /**
     * 
     * @type {number}
     * @memberof ChatRequest
     */
    seed?: number;
    /**
     * 
     * @type {Stop}
     * @memberof ChatRequest
     */
    stop?: Stop;
    /**
     * 
     * @type {ResponseFormat}
     * @memberof ChatRequest
     */
    responseFormat?: ResponseFormat;
    /**
     * 
     * @type {number}
     * @memberof ChatRequest
     */
    presencePenalty?: number;
    /**
     * 
     * @type {number}
     * @memberof ChatRequest
     */
    frequencyPenalty?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ChatRequest
     */
    stream?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ChatRequest
     */
    topP?: number;
    /**
     * 
     * @type {string}
     * @memberof ChatRequest
     */
    user?: string;
    /**
     * 
     * @type {number}
     * @memberof ChatRequest
     */
    timeout?: number;
    /**
     * 
     * @type {string}
     * @memberof ChatRequest
     */
    app?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatRequest
     */
    appServiceName?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatRequest
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatRequest
     */
    batch?: string;
}

/**
 * Check if a given object implements the ChatRequest interface.
 */
export function instanceOfChatRequest(value: object): boolean {
    if (!('messages' in value)) return false;
    return true;
}

export function ChatRequestFromJSON(json: any): ChatRequest {
    return ChatRequestFromJSONTyped(json, false);
}

export function ChatRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'endpoint': json['endpoint'] == null ? undefined : json['endpoint'],
        'model': json['model'] == null ? undefined : json['model'],
        'messages': ((json['messages'] as Array<any>).map(ChatMessageFromJSON)),
        'temperature': json['temperature'] == null ? undefined : json['temperature'],
        'maxTokens': json['max_tokens'] == null ? undefined : json['max_tokens'],
        'n': json['n'] == null ? undefined : json['n'],
        'seed': json['seed'] == null ? undefined : json['seed'],
        'stop': json['stop'] == null ? undefined : StopFromJSON(json['stop']),
        'responseFormat': json['response_format'] == null ? undefined : ResponseFormatFromJSON(json['response_format']),
        'presencePenalty': json['presence_penalty'] == null ? undefined : json['presence_penalty'],
        'frequencyPenalty': json['frequency_penalty'] == null ? undefined : json['frequency_penalty'],
        'stream': json['stream'] == null ? undefined : json['stream'],
        'topP': json['top_p'] == null ? undefined : json['top_p'],
        'user': json['user'] == null ? undefined : json['user'],
        'timeout': json['timeout'] == null ? undefined : json['timeout'],
        'app': json['app'] == null ? undefined : json['app'],
        'appServiceName': json['appServiceName'] == null ? undefined : json['appServiceName'],
        'category': json['category'] == null ? undefined : json['category'],
        'batch': json['batch'] == null ? undefined : json['batch'],
    };
}

export function ChatRequestToJSON(value?: ChatRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'endpoint': value['endpoint'],
        'model': value['model'],
        'messages': ((value['messages'] as Array<any>).map(ChatMessageToJSON)),
        'temperature': value['temperature'],
        'max_tokens': value['maxTokens'],
        'n': value['n'],
        'seed': value['seed'],
        'stop': StopToJSON(value['stop']),
        'response_format': ResponseFormatToJSON(value['responseFormat']),
        'presence_penalty': value['presencePenalty'],
        'frequency_penalty': value['frequencyPenalty'],
        'stream': value['stream'],
        'top_p': value['topP'],
        'user': value['user'],
        'timeout': value['timeout'],
        'app': value['app'],
        'appServiceName': value['appServiceName'],
        'category': value['category'],
        'batch': value['batch'],
    };
}

