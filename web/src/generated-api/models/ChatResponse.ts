/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Choice } from './Choice';
import {
    ChoiceFromJSON,
    ChoiceFromJSONTyped,
    ChoiceToJSON,
} from './Choice';
import type { Usage } from './Usage';
import {
    UsageFromJSON,
    UsageFromJSONTyped,
    UsageToJSON,
} from './Usage';

/**
 * 
 * @export
 * @interface ChatResponse
 */
export interface ChatResponse {
    /**
     * 
     * @type {string}
     * @memberof ChatResponse
     */
    id: string;
    /**
     * 
     * @type {Array<Choice>}
     * @memberof ChatResponse
     */
    choices: Array<Choice>;
    /**
     * 
     * @type {number}
     * @memberof ChatResponse
     */
    created: number;
    /**
     * 
     * @type {string}
     * @memberof ChatResponse
     */
    model: string;
    /**
     * 
     * @type {string}
     * @memberof ChatResponse
     */
    systemFingerprint?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatResponse
     */
    object?: string;
    /**
     * 
     * @type {Usage}
     * @memberof ChatResponse
     */
    usage: Usage;
}

/**
 * Check if a given object implements the ChatResponse interface.
 */
export function instanceOfChatResponse(value: object): boolean {
    if (!('id' in value)) return false;
    if (!('choices' in value)) return false;
    if (!('created' in value)) return false;
    if (!('model' in value)) return false;
    if (!('usage' in value)) return false;
    return true;
}

export function ChatResponseFromJSON(json: any): ChatResponse {
    return ChatResponseFromJSONTyped(json, false);
}

export function ChatResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'choices': ((json['choices'] as Array<any>).map(ChoiceFromJSON)),
        'created': json['created'],
        'model': json['model'],
        'systemFingerprint': json['system_fingerprint'] == null ? undefined : json['system_fingerprint'],
        'object': json['object'] == null ? undefined : json['object'],
        'usage': UsageFromJSON(json['usage']),
    };
}

export function ChatResponseToJSON(value?: ChatResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'choices': ((value['choices'] as Array<any>).map(ChoiceToJSON)),
        'created': value['created'],
        'model': value['model'],
        'system_fingerprint': value['systemFingerprint'],
        'object': value['object'],
        'usage': UsageToJSON(value['usage']),
    };
}

